# Basic Settings
set hidden false
set drawbox true
set icons true
set shell bash
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set icons

# set drawbox
set incsearch
set smartcase
set ignorecase
set anchorfind
set findlen 1
set tabstop 4
set info 'size'
set dircounts

# set previewer lf-previewer
# set cleaner lf-cleaner
set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

# QUIT CD


cmd q ${{
  tmp="/tmp/LF_LAST_DIR_PATH"
  dir="$(cat "$tmp")"
  if [ "$PWD" == "$dir" ]; then
    lf -remote "send $id quit"
  else
    echo "Changed directory to ''$dir' from '$PWD'. Use \`q!\` to force quit."
    read -s -p "Press enter to continue"
  fi
}}

cmd q! :{{
  quit
}}

cmd wq ${{
  tmp="/tmp/LF_LAST_DIR_PATH"
  echo "$PWD" > $tmp
  lf -remote "send $id quit"
}}


# FAST Quit
map x quitcd
cmd quitcd ${{
	echo "1" > "$LF_TEMPDIR"/cdtolastdir
	lf -remote "send $id quit"
}}

# Custom Functions
# OPEN
cmd open ${{
    case $(file --mime-type "$f" -bL) in
        text/*|application/json) nvim "$f";;
        *) xdg-open "$f" ;;
    esac
}}


# Make dir
cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

# Create a directory with the selected items
cmd new-folder-with-selection ${{
  set -f
  printf "Directory name: "
  read newd
  mkdir -- "$newd"
  mv -- $fx "$newd"
}}


# DELETE
cmd delete ${{
  set -f
  printf "\n$fx\n"
  printf "delete?[y/N] "
  read ans
  if [[ $ans == "y" ]]; then
    rm -rf $fx
  fi
}}


# SELECT All - Inverse
cmd select-all :unselect; invert


# Bulk rename on selected files or all the non-hidden files in the current directory if no selection
cmd bulk-rename ${{
  old="$(mktemp)"
  new="$(mktemp)"
  if [ -n "$fs" ]; then
    fs="$(basename $fs)"
  else
    fs="$(ls)"
  fi
  printf '%s\n' "$fs" >"$old"
  printf '%s\n' "$fs" >"$new"
  $EDITOR "$new"
  [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
  paste "$old" "$new" | while IFS= read -r names; do
    src="$(printf '%s' "$names" | cut -f1)"
    dst="$(printf '%s' "$names" | cut -f2)"
    if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
        continue
    fi
    mv -- "$src" "$dst"
  done
  rm -- "$old" "$new"
  lf -remote "send $id unselect"
}}


# Copy the file names (including extension) of the selections separated by \n
cmd copy-filename ${{
  names="$(echo $fx | tr ' ' '\n' | xargs -I{} basename {})"
  echo $names | tr ' ' '\n' | pbcopy
}}

# Copy the absolute paths of selections separated by \n
cmd copy-absolute-path ${{
  echo $fx | tr ' ' '\n' | pbcopy
}}


# Select the file or directory via fzf
cmd fzf-select ${{
  IFS=' '
  exclude=$(cat $HOME/exclude | sed 's/^/--exclude /' | tr '\n' ' ')
  select=$(fd --hidden --follow $exclude | fzf) || true
  lf -remote "send $id select $select"
}}

# cd into the selected directory via fzf
cmd fzf-cd ${{
  IFS=' '
  exclude=$(cat $HOME/exclude | sed 's/^/--exclude /' | tr '\n' ' ')
  select=$(fd --type d --hidden --follow $exclude | fzf) || true
  lf -remote "send $id cd $select"
}}



# Make file
cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

# CHMOD
cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}

cmd sudomkfile ${{
  printf "File Name: "
  read ans
  sudo $EDITOR $ans
}}


# REMOVE -rf
cmd rmf ${{
  rm -rf $f
}}



# cmd fzf_jump ${{
#   res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location')"
#   if [ -f "$res" ]; then
#     cmd="select"
#   elif [ -d "$res" ]; then
#     cmd="cd"
#   fi
#   lf -remote "send $id $cmd \"$res\""
# }}

# cmd broot_jump ${{
#   f=$(mktemp)
#   res="$(broot --outcmd $f && cat $f | sed 's/cd //')"
#   rm -f "$f"
#   if [ -f "$res" ]; then
#     cmd="select"
#   elif [ -d "$res" ]; then
#     cmd="cd"
#   fi
#   lf -remote "send $id $cmd \"$res\""
# }}

cmd open_config  ${{
  $EDITOR $(bookmenu -b ~/.config/bookmenu/configs -f fzf -o)
}}

# cmd dragon %dragon-drag-and-drop -a -x $fx
# cmd dragon-stay %dragon-drag-and-drop -a $fx
# cmd dragon-individual %dragon-drag-and-drop $fx
# cmd cpdragon %cpdragon
# cmd mvdragon %mvdragon
# cmd dlfile %dlfile

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

# Trash cli bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd clear_trash %trash-empty

cmd restore_trash ${{
  trash-restore
}}

cmd stripspace %stripspace "$f"

# Bindings
# Remove some defaults
map gh
map d
map y
map <space>
map zh
map d
map c


# map F fzf_jump

# File Openers
map e
map ee $nvim $fx
map es $subl $fx
map ev $vim $fx
map evs $code $fx
map eb $ brave $fx
map em $ mpv $fx
map en $ nomacs .
map eo $ thunar .

# Archive Mappings
map az zip
map at tar
map ag targz
map ab targz
map au unarchive

# Trash Mappings
map T trash
map Tc clear_trash
map Tr restore_trash



# Basic Functions
map <tab> :toggle;down
map yy copy
map yn copy-filename
map yP copy-absolute-path
map <enter> shell
map D delete
map Dr rmf

# list the size of each item in the current directory
map u
map ug $du -csh *
map <c-f> fzf-select
map <c-j> fzf-cd
map <c-o> $thunar .

# give a name and then make a directory
map <c-n> push :mkdir<space>
map <a-n> new-folder-with-selection
map x cut

# give a name and then use neovim to edit it
map V push :!nvim<space>

# Navigate among the parent directories
map [ push hkl
map ] push hjl

# Rename
map r
map A rename # at the very end
map I push A<c-a> # at the very beginning
map rn push A<c-u> # rename the filename
map re push A<c-f><c-k> # rename the extension
map <c-r> bulk-rename
# Use <space> as the leader key
# compress (give a name like abc and it will compress the selected items to abc.zip)
map <space>c push :zip<space>
# extract
map <space>x extract

# BASIC function
map z. set hidden!
map p paste
map x cut
map y copy
map m
map mf mkfile
map mr sudomkfile
map md mkdir
map ms mark-save
map mR mark-remove
map mL mark-load




map ch ahmod
map o open_config
map r rename
map H top
map L bottom
map R reload
map C clear
map U unselect
cmap <tab> cmd-menu-complete
cmap <backtab> cmd-menu-complete-back


# Movement
map gtr cd ~/.local/share/Trash/files
map gv. cd ~/Video/
map gi cd ~/Immagini/
map gd cd ~/Documenti/
map gss cd ~/Scaricati/
map gsc cd ~/Scrivania/
map gc cd ~/.config
map gl cd ~/.local
map gE cd /etc
map gU. cd /usr
map gUs cd /usr/share
map gh cd ~

